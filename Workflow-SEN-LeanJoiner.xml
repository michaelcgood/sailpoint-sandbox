<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE Workflow PUBLIC "sailpoint.dtd" "sailpoint.dtd">
<!-- <Workflow explicitTransitions="true" name="Workflow-SEN-LeanJoiner" type="LCMProvisioning"> -->
<Workflow name="Workflow-SEN-LeanJoiner" libraries="Identity,LCM" >
  <Variable input="true" name="quickLinkIdentityId"/>
  <Variable input="true" name="inputLastName"/>
  <Variable input="true" name="inputFirstName"/>
  <Variable input="true" name="inputDob"/>
  
  
  <Variable initializer="CreatePersona" input="true" name="eventName">
    <Description>eventName.</Description>
  </Variable>
  <Variable initializer="N100" input="true" name="personaSPIN">
    <Description>eventName.</Description>
  </Variable>
  
  <Variable name="effectiveDate"/>
  <Variable name="fileParameters"/>
  <Variable name="requesterCommnets"/>
  
  <Variable name="workflowParams"/>
  
  <Variable name="identityName">
    <Description>The name of the identity</Description>
    <Script>
      <Source><![CDATA[
	          import sailpoint.object.Identity;
	          
			  if(quickLinkidentityId!=null) {
			     Identity iden = context.getObjectById(Identity.class,quickLinkIdentityId);
			     return iden.getName();
			  }
	      ]]></Source>
    </Script>
  </Variable>
  
  <Variable name="idenName">
    <Description>Name of the identity as initially passed. Its required for Create vs Update scenario</Description>
    <Script>
      <Source><![CDATA[
	          import sailpoint.object.Identity;
	          
			  if(null != quickLinkidentityId) {
			     Identity iden = context.getObjectById(Identity.class,quickLinkIdentityId);
			     return iden.getName();
			  }
	      ]]></Source>
    </Script>
  </Variable>
  <Variable initializer="true" name="trace">
    <Description>
	      Used for debugging this workflow and when set to true trace
	      will be sent to stdout.
	    </Description>
  </Variable>
  <Variable initializer="CreatePersonaRequest" name="flow">
    <Description>
      The name of the LCM flow that launched this workflow.

      This is one of these two values:

      IdentityCreateRequest
      IdentityEditRequest
    </Description>
  </Variable>
  <Variable initializer="true" name="doRefresh">
    <Description>
	     decide whether to refresh Identity or not
	    </Description>
  </Variable>

  <Variable initializer="false" name="transient">
    <Description>
        Set to false to cause workflow-related objects, such as approval
        work items, to be saved in the database even if they are only
        viewed by the person registering.
      </Description>
  </Variable>

  <Variable input="true" name="launcher">
    <Description>launcher.</Description>
  </Variable>
  <Variable initializer="string:LCM" name="source">
    <Description>The name of the identity.</Description>
  </Variable>
  
  <!-- <Variable initializer="script:resolveDisplayName(identityName)" input="true" name="identityDisplayName"> -->
  
  <Variable initializer="script:resolveDisplayName(identityName)" name="identityDisplayName">
    <Description>
	      The displayName of the identity being updated.
	      Query for this using a projection query and fall back to the name.
	    </Description>
  </Variable>
  <Variable initializer="false" name="foregroundProvisioning"/>
  <Variable name="provStatus">
    <Description>Provisioning Status.</Description>
  </Variable>
  <Variable name="provErrorLst">
    <Description>Provisioning error List.</Description>
  </Variable>
  <Variable name="plan"/>
  <Variable name="adPlan"/>
  
  <Variable name="project"/>
  <Variable name="identityModel"/>
  <Variable name="personaModel"/>
  <Variable name="formNameRequired"/>
  <Variable name="formNameConfirm"/>
  
  
  <Variable name="reqAuthority"/>
  <Variable name="launcherCapability"/>
  <Variable initializer="string:No" name="needIdBadge"/>
  <!--  -->
  <Variable name="triggerSunrise"/>

  <Variable name="oneStepReqId"/>

  
  <Variable initializer="" name="successTo"/>
  <Variable initializer="" name="failureTo"/>
  
  <Variable initializer="" name="successTemplate"/>
  <Variable initializer="" name="failureTemplate"/>
  <Variable initializer="true" name="updateStandardPostProvEmails"/>
  <Variable initializer="false" name="updateStandardPostApproveEmails"/>
  
  <Variable name="exitWorkflow">
    <Description>
         Value posted by the "Exit Workflow" form button, to indicate the workflow should end.
         This is somethign handled in transitions on Approvals that have forms and gives
         a way for customers to exit the workflow.
       </Description>
  </Variable>  
  
  <Description>
		This is the deployment framework's standard LCE EmailChange WF 
  </Description>
  <RuleLibraries>
    <Reference class="sailpoint.object.Rule" name="RulesLibrary-SEN-Utils"/>
    <Reference class="sailpoint.object.Rule" name="RulesLibrary-SEN-Identity"/>
    <Reference class="sailpoint.object.Rule" name="RulesLibrary-SEN-CreatePersona"/>
    <Reference class="sailpoint.object.Rule" name="RulesLibrary-SEN-CONF-CreatePersona"/>
    <Reference class="sailpoint.object.Rule" name="RulesLibrary-SEN-Departments"/>
    <Reference class="sailpoint.object.Rule" name="RulesLibrary-SEN-SearchFeature"/>
    <Reference class="sailpoint.object.Rule" name="RulesLibrary-SEN-PluginUtils"/>
    <Reference class="sailpoint.object.Rule" name="RulesLibrary-SEN-ADFieldValue"/>
    <Reference class="sailpoint.object.Rule" name="RulesLibrary-SEN-Workgroups"/>
    <Reference class="sailpoint.object.Rule" name="RulesLibrary-SEN-Notifications"/>
    
    
    <!-- All SP FW rules are in RulesLibrary sp folder -->
    <Reference class="sailpoint.object.Rule" name="SP Provisioning Rules Library"/>
    <Reference class="sailpoint.object.Rule" name="SP Role Assigment Rule Library"/>
    <Reference class="sailpoint.object.Rule" name="SP Attr Synch Rules Library"/>
    <Reference class="sailpoint.object.Rule" name="SPCONF Common Rules Library"/>
    <Reference class="sailpoint.object.Rule" name="SPCONF Attr Synch Rules Library"/>
    
  </RuleLibraries>
  <Step icon="Start" name="Start" posX="2" posY="135">
    <Transition to="Build Persona Model"/>
  </Step>
  
  <Step action="call:getIdentityModel" icon="Task" name="Build Persona Model" posX="186" posY="10" resultVariable="personaModel">
    <Arg name="identityName" value="ref:personaSPIN"/>
    <Transition to="Initialize"/>
  </Step>
 
  <Step icon="Start" name="Initialize" posX="2" posY="135">
    <Script>
      <Source><![CDATA[
        import java.util.HashMap;
        import java.util.Iterator;
        import java.util.Map.Entry;
        import java.util.ArrayList;
        import sailpoint.tools.Util;
        import sailpoint.object.WorkflowCase;
		import java.util.UUID;

        import sailpoint.object.Identity;
        import org.apache.commons.logging.Log;
		import org.apache.commons.logging.LogFactory;
		
		private static Log logger = LogFactory.getLog("senate.workflow.CreatePersona");
		
        logger.warn("Workflow-SEN-LeanJoiner :: The Identity Model is " + personaModel);
        
        logger.warn("Workflow-SEN-LeanJoiner ::  The eventName is " + eventName);
        logger.warn("Workflow-SEN-LeanJoiner ::  The launcher is " + launcher);
       
		personaSPIN = workflow.get("personaSPIN");
		
		logger.warn("Workflow-SEN-LeanJoiner :: The Requestor identity is " + identityName);
		
		reqAuthority = determineRequestorAuthority(identityName);
		logger.warn("Workflow-SEN-LeanJoiner ::  The  reqAuthority is " + reqAuthority);
		launcherCapability = determineRequestorAuthority(identityName);
		logger.warn("Workflow-SEN-LeanJoiner :: The  launcherCapability is " + launcherCapability);
		workflow.put("reqAuthority", reqAuthority);
		workflow.put("launcherCapability", "launcherCapability");
		
		

		//logger.warn("Workflow-SEN-LeanJoiner :: workflow name is  " + workflow);

		//if(Util.isNullOrEmpty(oneStepReqId)){
		//	WorkflowCase currentWorkflowCase = wfcontext.getRootWorkflowCase();
		//	logger.warn("Workflow-SEN-LeanJoiner :: Initialize :: currentWorkflowCase "+currentWorkflowCase);
		//	if(null != currentWorkflowCase.getId()){
		//		String rid = currentWorkflowCase.getId();
		//		oneStepReqId = UUID.nameUUIDFromBytes(rid.getBytes()).toString();
		//	}
		//}
		
		if(Util.isNullOrEmpty(oneStepReqId)){
			oneStepReqId = "N100";
		}

		logger.warn("Workflow-SEN-LeanJoiner :: oneStepReqId " + oneStepReqId);
		
		   
        ]]></Source>
    </Script>
    <Transition to="Create Slim Inputs Form"/>
  </Step>

 
  <Step icon="Approval" name="Create Slim Inputs Form" posX="175" posY="21">
    <Description>This step is used update user that no email change is required for selected user</Description>
    <Approval mode="serial" name="Create Persona Form" owner="ref:launcher" return="personaModel,needIdBadge,requesterCommnets,targetDeptSelected" send="launcherCapability,personaModel,needIdBadge,inputLastName">
      <Arg name="workItemType" value="string:Form"/>
      <Arg name="personaSPIN" value="ref:personaSPIN"/>
      <Arg name="identityName" value="ref:identityName"/>
      <Arg name="launcherCapability" value="ref:launcherCapability"/>
      <Arg name="identityDisplayName" value="ref:identityDisplayName"/>
      <Arg name="launcher" value="ref:launcher"/>
      <Arg name="workItemDescription" value="string:Create Identity Request by $(launcher)"/>
      <Arg name="workItemFormBasePath" value="personaModel"/>
      <Arg name="workItemForm" value="Form-SEN-LeanJoiner-IdentityInputs"/>
    </Approval>
   	<Transition to="Build Persona Creation Plan" when="script:(approved)" />
    
  </Step>

  <Step action="call:addMessage" name="Exit On Manual Work Items" posX="364" posY="107">
    <Arg name="message" value="Failed due to manual work item(s)"/>
    <Arg name="type" value="Error" />
    <Transition to="end"/>
  </Step>


   

  <Step icon="Default" name="Build Persona Creation Plan" posX="2" posY="135" resultVariable="plan">
    <Description>Build Persona Creation Plan.</Description>
    <Script>
      <Source><![CDATA[
        import java.util.ArrayList;
        import java.util.Random;
        import sailpoint.object.ProvisioningResult;
        import sailpoint.object.Identity;
        import sailpoint.object.ProvisioningPlan.AccountRequest;  
        import sailpoint.object.ProvisioningPlan.AttributeRequest;
        import org.apache.commons.logging.Log;
		import org.apache.commons.logging.LogFactory;
		
		private static Log logger = LogFactory.getLog("senate.workflow.CreatePersona");
        logger.warn("senate.workflow.CreatePersona");
        ProvisioningPlan plan = workflow.get("plan");
		logger.warn("Workflow-SEN-LeanJoiner :: Build Persona Creation Plan :: the plan is "+plan);
		
		if (plan == null){
			plan = new ProvisioningPlan();
		}
		
		String identityName = workflow.get("personaSPIN");
		logger.warn("Workflow-SEN-LeanJoiner :: Build Persona Creation Plan :: the identityName is "+identityName);

		logger.warn("Workflow-SEN-LeanJoiner :: Build Persona Creation Plan :: the personaModel is "+personaModel);

		if(null !=personaModel){
			workflow.put("personaModel",personaModel);
		}
		personaSPIN =workflow.get("personaSPIN");
		logger.warn("Workflow-SEN-LeanJoiner :: Build Persona Creation Plan :: the personaSPIN is"+personaSPIN);

		
		ArrayList accntLst=new ArrayList();
		
		AccountRequest iiqAccountRequest =null;
		
		if(STR_CREATE_IDENTITY.equalsIgnoreCase(eventName)) {
		    //For IIQ Cube Creation
			iiqAccountRequest = createPersona(context,workflow);
			logger.warn("Workflow-SEN-LeanJoiner :: Build Persona Creation Plan :: the iiqAccountRequest is"+iiqAccountRequest);
			if(null == personaSPIN || personaSPIN.equalsIgnoreCase("N100") ){
				personaSPIN = iiqAccountRequest.getNativeIdentity();
				logger.warn("Workflow-SEN-LeanJoiner :: Build Persona Creation Plan :: personaSPIN from account request native identity "+personaSPIN);
			}	
		}
		
		if(null != iiqAccountRequest){
		  accntLst.add(iiqAccountRequest);
		}
		logger.warn("Workflow-SEN-LeanJoiner :: Build Persona Creation Plan :: THE SPIN IS "+personaSPIN);
		
		plan.setAccountRequests(accntLst);

        // Create a temporary identity object
    Identity identity = new Identity();

    List accounts = plan.getAccountRequests();
    String fname;
    String lname;
    String spin;
    String deptNumber;

    for ( AccountRequest account : accounts ) {
      fname = (String) account.getAttributeRequest("firstname").getValue().toString().toUpperCase();
      lname = (String) account.getAttributeRequest("lastname").getValue().toString().toUpperCase();
      spin = (String) account.getAttributeRequest("spin").getValue().toString().toUpperCase();
      deptNumber = (String) account.getAttributeRequest("deptNumber").getValue().toString().toUpperCase();
    }

   
    // Set the necessary attributes for the identity
    identity.setAttribute("firstname",fname); // Set the identity name or any other required attributes
    identity.setAttribute("lastname",lname);
    identity.setAttribute("spin",spin);
    identity.setName(spin);
    identity.setAttribute("deptNumber", deptNumber);
    context.saveObject(identity);
    context.commitTransaction();
    // look up identity object
   
    
    // Set the identity on the plan
    plan.setIdentity(identity);


		logger.warn("Workflow-SEN-LeanJoiner :: Build Persona Creation Plan :: the plan is "+plan.toXml());

		if(null !=personaSPIN && !personaSPIN.equalsIgnoreCase("N100")){
			logger.warn("Workflow-SEN-LeanJoiner :: Build Persona Creation Plan :: Identity from Plan "+plan.getIdentity());
		}
		
		//Before return the plan set triggerSunrise
		
		
		return plan;
		]]></Source>
    </Script>
    <Transition to="Schedule Sunrise For Slim Create"/> 

  </Step>

 
 
  <Step name="Schedule Sunrise For Slim Create" action="call:scheduleWorkflowEvent"> 
	<!--	<Arg name="workflow" value="Workflow-SEN-ScheduledLeanJoiner"/> -->
		<Arg name="requestName">
		    <Script>
		        <Source>
		          String endUserName = null;
		          endUserName = personaModel.get("formLastName")+" "+personaModel.get("formFirstName");
		          return("Scheduled Create Identity for :"+endUserName+ " submitted by :"+identityDisplayName);
		        </Source>
		    </Script>
		</Arg>
	    <Arg name="scheduleDelaySeconds">
	      <Script>
	        <Source><![CDATA[
	
		          import java.util.Date;
		          import sailpoint.tools.Util;
				  import java.text.ParseException;
				  import java.text.SimpleDateFormat;
		          import org.apache.commons.logging.Log;
				  import org.apache.commons.logging.LogFactory;
				  import java.util.Calendar;
		          
		          private static Log flogger = LogFactory.getLog("senate.rulelibraries");
				  //yyyy-MM-dd hh:mm:ss.SSS
				  SimpleDateFormat dateFormat = new SimpleDateFormat("E MMM dd HH:mm:ss Z yyyy");
				  Date todayDate = new Date();
	
				  Calendar thisCalendar = Calendar.getInstance();
		          thisCalendar.setTime(todayDate);
		       	  thisCalendar.add(Calendar.SECOND, 300);
		          Date currentDate = thisCalendar.getTime();
		          long delaySeconds = 5;
	              flogger.warn("Workflow-SEN-LeanJoiner :: Schedule Sunrise For Lean Joiner :: currentDate "+currentDate);


                  long currentLongVal = currentDate.getTime();
	              flogger.warn("Workflow-SEN-LeanJoiner :: Schedule Sunrise For Lean Joiner :: currentLongVal "+currentLongVal);
				  long scheduledLongVal = 0;
				  
		    	  Date parsedStartDate = null;
		    	  
		    	  if(null != personaModel.get("formStartDate")){
			    	  parsedStartDate = dateFormat.parse(personaModel.get("formStartDate").toString());
	                  flogger.warn("Workflow-SEN-LeanJoiner :: Schedule Sunrise For Lean Joiner :: parsedStartDate "+parsedStartDate);
	                  scheduledLongVal = parsedStartDate.getTime();
	                  flogger.warn("Workflow-SEN-LeanJoiner :: Schedule Sunrise For Lean Joiner :: scheduledLongVal "+scheduledLongVal);
			      }
	   			  //if(null != parsedStartDate){
	   			  //	  delaySeconds = Util.computeDifferenceMilli(parsedStartDate,todayDate); 
		          //    flogger.warn("Workflow-SEN-LeanJoiner :: Schedule Sunrise For Lean Joiner :: Seconds to Delay for start date "+delaySeconds);
	   			  //}
	   			  if(scheduledLongVal @gt currentLongVal){
	    	          delaySeconds = scheduledLongVal-currentLongVal;
	   			  }else{
	    	          delaySeconds = 1;
	   			  }
	   			  
	              flogger.warn("Workflow-SEN-LeanJoiner :: Schedule Sunrise For Lean Joiner :: delaySeconds from calcFutureTime "+delaySeconds);
	   			  
		          return delaySeconds;
	]]></Source>
	      </Script>
	    </Arg>
    <Arg name="flow" value="ref:flow"/>		
		<Arg name="quickLinkIdentityId" value="ref:launcher"/>
		<Arg name="eventName" value="string:CreatePersona"/>
		<Arg name="launcher" value="ref:launcher"/>
		<Arg name="owner" value="ref:launcher"/>
		<Arg name="personaSPIN" value="ref:personaSPIN"/>
		<Arg name="personaModel" value="ref:personaModel"/>
		<Arg name="plan" value="ref:plan"/>
		<Arg name="identityName" value="ref:launcher"/>
		<Arg name="idenName" value="ref:launcher"/>
		<Arg name="identityDisplayName" value="ref:identityDisplayName"/>
    <!--  <WorkflowRef>
      <Reference class="sailpoint.object.Workflow" name="Workflow-SEN-ScheduledLeanJoiner"/>
    </WorkflowRef> -->
       <Transition to="InitializeSchedule"/>
   </Step>

   <Step  name="InitializeSchedule" resultVariable="isActiveDirectoryRequiredForIdentity">
    <Script>
      <Source><![CDATA[
        import java.util.HashMap;
        import java.util.Iterator;
        import java.util.Map.Entry;
        import java.util.ArrayList;

        import sailpoint.object.Identity;
		import sailpoint.tools.Util;
	    import org.apache.commons.logging.Log;
		import org.apache.commons.logging.LogFactory;
      import sailpoint.object.Workflow;
        import sailpoint.tools.GeneralExecption;
        import sailpoint.workflow.WorkflowContext;
        import sailpoint.object.TaskDefinition;
		
		private static Log logger = LogFactory.getLog("senate.workflow.CreatePersona");
		
        logger.warn("Workflow-SEN-ScheduledLeanJoiner :: The Identity Model is " + personaModel);
        
        logger.warn("Workflow-SEN-ScheduledLeanJoiner :: The eventName is " + eventName);
        logger.warn("Workflow-SEN-ScheduledLeanJoiner :: Input personaSPIN " + personaSPIN);
    
    try {
      WorkflowContext context  = WorkflowContext.getCurrent();
      TaskDefinition taskDefinition = context.getTaskDefinition();
      Workflow workflow = taskDefinition.getWorkflow();

    }catch(GeneralException e){

    }
		if(null == personaSPIN || personaSPIN.equals("N100")){
			personaSPIN = personaModel.get("spin"); //workflow.get("personaSPIN");
	        logger.debug("Workflow-SEN-ScheduledLeanJoiner :: Identity Name from Plan " +plan.getIdentity());
			//personaSPIN = plan.getIdentity();
	        //logger.debug("Workflow-SEN-ScheduledLeanJoiner :: Identity Name set for personaSPIN from Plan " +personaSPIN);
		}
		
		logger.warn("start Workflow-SEN-ScheduledLeanJoiner");
		logger.debug("Workflow-SEN-ScheduledLeanJoiner :: The Requestor identity is " + identityName);
		
		reqAuthority = determineRequestorAuthority(identityName);
		logger.debug("Workflow-SEN-ScheduledLeanJoiner :: The  reqAuthority is " + reqAuthority);
		launcherCapability = determineRequestorAuthority(identityName);
		
		logger.debug("Workflow-SEN-ScheduledLeanJoiner :: The  launcherCapability is " + launcherCapability);
		workflow.put("reqAuthority", reqAuthority);
		workflow.put("launcherCapability", launcherCapability);
		
		logger.debug("Workflow-SEN-ScheduledLeanJoiner :: isActiveDirectoryRequiredForIdentity before " + isActiveDirectoryRequiredForIdentity);
		isActiveDirectoryRequiredForIdentity = isActiveDirectoryRequired(personaModel.get("formPersonaStatus"));
		
		logger.debug("Workflow-SEN-ScheduledLeanJoiner :: isActiveDirectoryRequiredForIdentity after " + isActiveDirectoryRequiredForIdentity);
		workflow.put("isActiveDirectoryRequiredForIdentity",isActiveDirectoryRequiredForIdentity);
		logger.debug("Workflow-SEN-ScheduledLeanJoiner :: Workflow Case ID " + launcherCapability);
		logger.debug("Workflow-SEN-ScheduledLeanJoiner :: DOB " +personaModel.get("formDob"));

		return isActiveDirectoryRequiredForIdentity;
		   
        ]]></Source>
    </Script>
    <Transition to="Provision"/> 
  </Step>
 
   <Step icon="Task" name="Provision" posX="1184" posY="126">
    <Arg name="flow" value="ref:flow"/>
    <Arg name="identityName" value="ref:idenName"/>
    <Arg name="plan" value="ref:plan"/>
    <Arg name="notificationScheme" value="none"/>
    <Arg name="approvalMode" value="none"/>
    <Arg name="approvalScheme" value="none"/>
    <Arg name="doRefresh" value="ref:doRefresh"/>
    <Arg name="policyScheme" value="none"/>
    <Arg name="trace" value="ref:trace"/>
    <Arg name="foregroundProvisioning" value="ref:foregroundProvisioning"/>
    <Return name="project" to="project"/>
    <WorkflowRef>
      <Reference class="sailpoint.object.Workflow" name="LCM Create and Update"/>
    </WorkflowRef>
    <Transition to="Refresh Senate Identity"/>
  </Step>
 
  <Step action="call:refreshIdentity" icon="Task" name="Refresh Senate Identity">
    <Arg name="identityName" value="ref:personaSPIN"/>
    <Arg name="correlateEntitlements" value="false"/>
    <Description>
      Add arguments as necessary to enable refresh features.  Typically you 
      only want this to correlate roles.  Don't ask for provisoinign since that
      can result in provisoiing policies that need to be presented and it's
      too late for that.  This is only to get role detection and exception
      entitlements in the cube.
    </Description>

    <Transition to="Invoke Missing DOB WF" when="script:(null == personaModel.get(&quot;formDob&quot;) )"/>
	<Transition to="Build Persona Creation Plan for AD" when="script:(isTrue(isActiveDirectoryRequiredForIdentity))"/> 
    <!--<Transition to="Invoke Missing DOB WF" when="script:(isFalse(isActiveDirectoryRequiredForIdentity) &amp;&amp; null == personaModel.get(&quot;formDob&quot;) )"/>-->
    <Transition to="Build Persona Creation Plan for BMS32"/>
	
    <Transition to="end"/>
  </Step>  

<Step action="call:refreshIdentity" icon="Task" name="Refresh Senate Identity">
    <Arg name="identityName" value="ref:personaSPIN"/>
    <Arg name="correlateEntitlements" value="false"/>
    <Description>
      Add arguments as necessary to enable refresh features.  Typically you 
      only want this to correlate roles.  Don't ask for provisoinign since that
      can result in provisoiing policies that need to be presented and it's
      too late for that.  This is only to get role detection and exception
      entitlements in the cube.
    </Description>

    <Transition to="Invoke Missing DOB WF" when="script:(null == personaModel.get(&quot;formDob&quot;) )"/>
	<Transition to="Build Persona Creation Plan for AD" when="script:(isTrue(isActiveDirectoryRequiredForIdentity))"/> 
    <!--<Transition to="Invoke Missing DOB WF" when="script:(isFalse(isActiveDirectoryRequiredForIdentity) &amp;&amp; null == personaModel.get(&quot;formDob&quot;) )"/>-->
    <Transition to="Build Persona Creation Plan for BMS32"/>
	
    <Transition to="end"/>
  </Step>  


  
   <Step icon="Task" name="Invoke Missing DOB WF" posX="1184" posY="126">
    <Arg name="quickLinkIdentityId" value="ref:launcher"/>
    <Arg name="eventName" value="string:MissingDOB"/>
    <Arg name="employeeName" value="ref:personaSPIN"/>
    <Arg name="launcher" value="ref:launcher"/>
    <Arg name="approvalMode" value="string:any"/>
    <WorkflowRef>
      <Reference class="sailpoint.object.Workflow" name="Workflow-SEN-MissingDOB-DepartmentManager"/>
    </WorkflowRef>
    <Transition to="Build Persona Creation Plan for BMS32"/>
	<Transition to="Send Emails" />
    <Transition to="end"/>
  </Step> 
    
  <Step icon="Default" name="Build Persona Creation Plan for AD" posX="2" posY="135" resultVariable="adPlan">
    <Description>Build Persona Creation Plan.</Description>
    <Script>
      <Source><![CDATA[
        import java.util.ArrayList;
        import java.util.Random;
        import sailpoint.object.ProvisioningResult;
        import sailpoint.object.Identity;
        import sailpoint.object.ProvisioningPlan.AccountRequest;  
        import sailpoint.object.ProvisioningPlan.AttributeRequest;
        import org.apache.commons.logging.Log;
		import org.apache.commons.logging.LogFactory;
		import sailpoint.object.ProvisioningProject;
		import sailpoint.object.ProvisioningResult;
        import sailpoint.object.ProvisioningPlan;
		
		private static Log logger = LogFactory.getLog("senate.workflow.CreatePersona");
    logger.setLevel(ch)
            
        ProvisioningPlan adPlan = null;//workflow.get("plan");
		
		if (adPlan == null){
			adPlan = new ProvisioningPlan();
		}
		
		String identityName=workflow.get("identityName");
		logger.debug("Workflow-SEN-ScheduledLeanJoiner :: Build Persona Creation Plan for AD ::  the identityName is "+identityName);

		logger.debug("Workflow-SEN-ScheduledLeanJoiner :: Build Persona Creation Plan for AD :: the personaModel is "+personaModel);

		if(null !=personaModel){
			workflow.put("personaModel",personaModel);
		}
		//personaSPIN =workflow.get("personaSPIN");
		//personaSPIN should be an input
		logger.debug("Workflow-SEN-ScheduledLeanJoiner :: Build Persona Creation Plan for AD :: the personaSPIN is  "+personaSPIN);
		Identity idObject =  null;
		
		if(null != personaSPIN){
			idObject = context.getObjectByName(Identity.class,personaSPIN);
			logger.debug("Workflow-SEN-ScheduledLeanJoiner :: Build Persona Creation Plan for AD :: Set identity "+idObject.getName());
		}
		
		ArrayList accntLst=new ArrayList();
		
		AccountRequest adAccountRequest =null;
		AccountRequest bms32AccountRequest =null;
		
		if(STR_CREATE_IDENTITY.equalsIgnoreCase(eventName)) {
			adAccountRequest = createBasicADAccount(context,idObject,workflow);
			logger.debug("Workflow-SEN-ScheduledLeanJoiner :: Build Persona Creation Plan for AD :: the adAccountRequest is "+adAccountRequest.toXml());
		}
		if(adAccountRequest!=null){
		  accntLst.add(adAccountRequest);
		}
		
		adPlan.setAccountRequests(accntLst);
		logger.debug("Workflow-SEN-ScheduledLeanJoiner :: Build Persona Creation Plan for AD :: the AD PLAN is "+adPlan);

 		Provisioner provisioner = new Provisioner(context);
		provisioner.setNoLocking(true);
		logger.debug("Workflow-SEN-ScheduledLeanJoiner :: Build Persona Creation Plan for AD :: the provisioner is "+provisioner);

		
		return adPlan;
		
		]]></Source>
    </Script>
    
    <Transition to="Provision To AD"/>
  </Step>

  <Step icon="Task" name="Provision To AD" posX="1184" posY="126">
     <Arg name="plan" value="ref:adPlan"/>
     <Arg name="flow" value="ref:flow"/>
     <Arg name="identityName" value="ref:personaSPIN"/>
     <Arg name="approvalScheme" value="none"/>
     <Arg name="notificationScheme" value="none"/>
    <WorkflowRef>
      <Reference class="sailpoint.object.Workflow" name="LCM Provisioning"/>
    </WorkflowRef>
    <Transition to="Invoke Missing DOB WF" when="script:(null == personaModel.get(&quot;formDob&quot;) )"/>
	
    <Transition to="Build Persona Creation Plan for BMS32"/>
    <Transition to="end"/>
  </Step>

  <Step icon="Default" name="Build Persona Creation Plan for BMS32" posX="2" posY="135" resultVariable="bms32Plan">
    <Description>Build Persona Creation Plan.</Description>
    <Script>
      <Source><![CDATA[
        import java.util.ArrayList;
        import java.util.Random;
        import sailpoint.object.ProvisioningResult;
        import sailpoint.object.Identity;
        import sailpoint.object.ProvisioningPlan.AccountRequest;  
        import sailpoint.object.ProvisioningPlan.AttributeRequest;
        import org.apache.commons.logging.Log;
		import org.apache.commons.logging.LogFactory;
		import sailpoint.object.ProvisioningProject;
		import sailpoint.object.ProvisioningResult;
        import sailpoint.object.ProvisioningPlan;
		
		private static Log logger = LogFactory.getLog("senate.workflow.CreatePersona");
            
		if (bms32Plan == null){
			bms32Plan = new ProvisioningPlan();
		}
		
		String identityName=workflow.get("identityName");
		logger.debug("Workflow-SEN-ScheduledLeanJoiner :: Build Persona Creation Plan for BMS32 ::  the identityName is "+identityName);

		logger.debug("Workflow-SEN-ScheduledLeanJoiner :: Build Persona Creation Plan for BMS32 :: the personaModel is "+personaModel);

		logger.debug("Workflow-SEN-ScheduledLeanJoiner :: Build Persona Creation Plan for BMS32 :: the personaSPIN is  "+personaSPIN);
		Identity idObject =  null;
		
		if(null != personaSPIN){
			idObject = context.getObjectByName(Identity.class,personaSPIN);
			logger.debug("Workflow-SEN-ScheduledLeanJoiner :: Build Persona Creation Plan for BMS32 :: Set identity "+idObject.getName());
		}
		
		ArrayList accntLst=new ArrayList();
		
		AccountRequest bms32AccountRequest =null;
		
		if(STR_CREATE_IDENTITY.equalsIgnoreCase(eventName)) {
			bms32AccountRequest = generateCreatePlanForBMS32(context,personaSPIN);
			logger.debug("Workflow-SEN-ScheduledLeanJoiner :: Build Persona Creation Plan for BMS32 :: the bms32AccountRequest is "+bms32AccountRequest.toXml());
		}
		if(bms32AccountRequest!=null){
		  accntLst.add(bms32AccountRequest);
		}
		
		bms32Plan.setAccountRequests(accntLst);
		logger.debug("Workflow-SEN-ScheduledLeanJoiner :: Build Persona Creation Plan for BMS32 :: the AD PLAN is "+bms32Plan);

 		Provisioner provisioner = new Provisioner(context);
		provisioner.setNoLocking(true);
		logger.debug("Workflow-SEN-ScheduledLeanJoiner :: Build Persona Creation Plan for BMS32 :: the provisioner is "+provisioner);

		
		return bms32Plan;
		
		]]></Source>
    </Script>
    <Transition to="Provision To BMS32"/>
    
    <!-- <Transition to="Refresh Identity After AD"/>-->
  </Step>

  <Step action="call:refreshIdentity" icon="Task" name="Refresh Identity After AD">
    <Arg name="identityName" value="ref:personaSPIN"/>
    <Arg name="refreshLinks" value="true"/>
    <Transition to="Provision To BMS32"/>
  </Step>
  
 <Step icon="Task" name="Provision To BMS32" posX="1184" posY="126">
     <Arg name="plan" value="ref:bms32Plan"/>
     <Arg name="flow" value="ref:flow"/>
     <Arg name="identityName" value="ref:personaSPIN"/>
     <Arg name="approvalScheme" value="none"/>
     <Arg name="notificationScheme" value="none"/>
    <WorkflowRef>
      <Reference class="sailpoint.object.Workflow" name="LCM Provisioning"/>
    </WorkflowRef>
    <Transition to="Set Provision Status"/>
    <Transition to="end"/>
  </Step>
 
  
  <Step icon="Default" name="Set Provision Status">
    <Description>
           Audit the Provisioning Plan 
     </Description>
    <Script>
      <Source><![CDATA[
            setProvisionStatus(context, workflow);
        ]]></Source>
    </Script>
    <Transition to="Post Provison"/>
  </Step>

  <Step icon="Default" name="Post Provison">
      <Description>
        Post provisioning processing Write back to AD Sync
        Write back to BMS 32
     </Description>
    <Script>
      <Source><![CDATA[
        import sailpoint.object.Identity;
        import org.apache.log4j.Logger;
        import sailpoint.object.WorkflowCase;
        import sailpoint.tools.Util;
		
		String writeBackToAd = null;
		String writeBackToPersons = null;
		private static Log logger = LogFactory.getLog("senate.workflow.CreatePersona");
        logger.debug("Workflow-SEN-ScheduledLeanJoiner :: Post Provison :: Start ");
		logger.debug("Workflow-SEN-ScheduledLeanJoiner :: Post Provison :: End ");
       
        ]]></Source>
    </Script>
   <!--<Transition to="Invoke Missing DOB WF" when="script:(Util.isNullOrEmpty(personaModel.get(&quot;formDob&quot;)) )"/>-->
   <Transition to="Send Emails"/>
   <Transition to="end"/>
  </Step>
  
     <Step name="Send Emails" >
		<Arg name="emailArgList" value="ref:emailArgList"/>
		<Arg name="personaModel" value="ref:personaModel"/>
        <Script>
        <Source><![CDATA[
                     
       import java.util.HashMap;
       import java.util.Iterator;
       import java.util.Map;
       import java.util.ArrayList;
       import org.apache.log4j.Logger;
       import sailpoint.api.SailPointContext;
       import sailpoint.api.SailPointFactory;
       import sailpoint.object.EmailOptions;
       import sailpoint.object.EmailTemplate;
       import sailpoint.object.Identity;
       import sailpoint.api.Provisioner;
       import sailpoint.object.ProvisioningPlan;
       import sailpoint.object.ProvisioningPlan.Operation;
       import sailpoint.tools.GeneralException;
       import sailpoint.object.ProvisioningPlan.AccountRequest;
       import sailpoint.object.ProvisioningPlan.AccountRequest.Operation;
       import sailpoint.object.ProvisioningProject;
       import org.apache.commons.logging.Log;
       import org.apache.commons.logging.LogFactory;  
       import sailpoint.api.Provisioner;   
              
       private static Log logger = LogFactory.getLog("senate.workflow.CreatePersona");                   
                 
	   logger.debug("Workflow-SEN-ScheduledLeanJoiner :: Send Emails :: emailArgList "+emailArgList);
	   if(null == emailArgList ){
		   //this should not be the case
		   emailArgList = new ArrayList();
		   String toEmailStr = getWorkgroupOrHREmails(personaSPIN);
		   logger.debug("Workflow-SEN-ScheduledLeanJoiner :: toEmailStr : " + toEmailStr);
		   HashMap hMap = new HashMap();
		   hMap.put("to", toEmailStr );
		   hMap.put("emailTemplate", "EmailTemplate-SEN-BadgeIssuanceSuccess");
		   HashMap genericArgs = new HashMap();
		   if(null != personaModel.get("formFirstName")){
				genericArgs.put("displayName", personaModel.get("formFirstName")+" "+personaModel.get("formLastName"));   
		   }
		   hMap.put("emailArgs",genericArgs);

		   emailArgList.add(hMap);                                   
                               
	   }	   

	   if(null != emailArgList && emailArgList.size() >0){
		   logger.debug("Workflow-SEN-ScheduledLeanJoiner :: Send Emails :: emailArgList "+emailArgList);
		   for(Map eMap : emailArgList){
			   EmailTemplate template = context.getObjectByName(EmailTemplate.class, eMap.get("emailTemplate"));
			   logger.debug("Workflow-SEN-ScheduledLeanJoiner :: Send Emails ::  Mail template "+template.getName());
			   Map mArgs = new HashMap();
			   mArgs.put("emailArgs",eMap.get("emailArgs"));
			   EmailOptions options = new EmailOptions(eMap.get("to"), mArgs);
			   context.sendEmailNotification(template, options);
			   logger.debug("Workflow-SEN-ScheduledLeanJoiner :: Send Emails :: Mail Sent ");
		   }	   
	   }
             
              ]]></Source>
             </Script>
			<Transition to="Post TDI To PeopleSoft" />
			<Transition to="end" />
       </Step>

<!--
  <Step name="Send Emails">
    <Arg name="emailArgList" value="ref:emailArgList"/>
    <Description>
      Call the standard subprocess that will handle the built-in
      owner, manager and security officer approval schemes.
    </Description>
    <WorkflowRef>
      <Reference class="sailpoint.object.Workflow" name="SP Dynamic Send Emails Sub"/>
    </WorkflowRef>
    <Transition to="Post TDI To PeopleSoft" />
    <Transition to="end" />
  </Step>
  -->
	<Step name="Post TDI To PeopleSoft">
        <Arg name="inIdentity" value="ref:inIdentity"/>
	
        <Description>Post back to the PeopleSoft REST end point with the TDI details.
        </Description>
        <Script>
            <Source>
            <![CDATA[
            import java.util.HashMap;
            import java.util.Map;    
            import sailpoint.api.SailPointContext;
            import sailpoint.object.Attributes;
            import sailpoint.object.Rule;      
            import sailpoint.tools.GeneralException;
			import org.apache.commons.logging.Log;
			import org.apache.commons.logging.LogFactory;  
			import sailpoint.api.Provisioner;   
              
			private static Log logger = LogFactory.getLog("senate.workflow.CreatePersona");                  
			
			logger.info("Workflow-SEN-ScheduledLeanJoiner :: Post TDI To PeopleSoft :: for Target User personaSPIN "+personaSPIN);
     
			
            Rule postToPeopleSoftRule = null;
			Identity inIdentity = null;
			HashMap ruleArgs = new HashMap();
			//String targetIdentityName = null;
			//targetIdentityName = ((String)personaModel.get("spin")).trim();
			if(null != personaSPIN ){
				logger.info("Workflow-SEN-ScheduledLeanJoiner :: Post TDI To PeopleSoft :: for Target User  "+personaSPIN);
				inIdentity = context.getObjectByName(Identity.class,personaSPIN);
				ruleArgs.put("inIdentity", inIdentity);
				ruleArgs.put("inIdentityName", personaSPIN);
				logger.info("Workflow-SEN-ScheduledLeanJoiner :: Post TDI To PeopleSoft :: for Target User  inIdentity "+personaSPIN);
				if(null != inIdentity){
					logger.info("Workflow-SEN-ScheduledLeanJoiner :: Post TDI To PeopleSoft :: ruleArgs "+inIdentity.getName());
					ruleArgs.put("inIdentity", inIdentity);
					//ruleArgs.put("inIdentityName", inIdentity.getName());
					
					postToPeopleSoftRule = context.getObjectByName(Rule.class, "Rule-SEN-WritebackToPeopleSoftHCM");
					logger.info("Workflow-SEN-ScheduledLeanJoiner :: Post TDI To PeopleSoft :: obtained rule obj  "+postToPeopleSoftRule.getName());
					String returnPostVal = context.runRule(postToPeopleSoftRule, ruleArgs);
					logger.info("Workflow-SEN-ScheduledLeanJoiner :: Post TDI To PeopleSoft :: obtained result returnPostVal "+returnPostVal);
					
					context.decache(postToPeopleSoftRule);
					workflow.put("WriteToPeopleSoft",returnPostVal);
				}
			}
			
        
            ]]>
            </Source>
        </Script>
       <Transition to="Spin Workitem For LAN Admins"/>
       <Transition to="end"/>
    </Step>  
   	
  <Step name="Spin Workitem For LAN Admins"  >
    <Script>
    <Source><![CDATA[
                     
       import org.apache.commons.logging.Log;
       import org.apache.commons.logging.LogFactory;  
              
       private static Log logger = LogFactory.getLog("senate.workflow.CreatePersona");                  
       boolean spinWorkItem = createManageAccessWorkItem(personaSPIN,launcher,eventName);          
       logger.debug("Workflow-SEN-ScheduledLeanJoiner :: Spin Workitem For LAN Admins :: spinWorkItem " +spinWorkItem);
               
     ]]></Source>
     </Script>
     
     <Transition to="end" />
  </Step>  
 
  <Step icon="Stop" name="end"/>
</Workflow>
